#[macro_export]
macro_rules! append_fields {
    ($acc:ident, $val:ident, $($field:ident,)*) => (
        $(
            if $val.$field {
                $acc.push(stringify!($field).to_string());
            }
        )*
    );
}

#[macro_export]
macro_rules! dbg_msg_type {
    ($this:expr) => {{
        use vulkano::instance::debug::MessageType;

        let val = MessageType {
            general: $this.general,
            validation: $this.general,
            performance: $this.general,
        };
        let mut types = vec![];
        if val.general {
            types.push("genr".to_string())
        }
        if val.validation {
            types.push("vald".to_string())
        }
        if val.performance {
            types.push("perf".to_string())
        }
        types
    }};
}

#[macro_export]
macro_rules! dbg_msg_severity {
    ($this:expr) => {{
        use vulkano::instance::debug::MessageSeverity;

        let val = MessageSeverity {
            error: $this.error,
            warning: $this.warning,
            information: $this.information,
            verbose: $this.verbose,
        };

        let mut severity = "NONE".to_string();
        if val.verbose {
            severity = "VERB".to_string();
        }
        if val.information {
            severity = "INFO".to_string();
        }
        if val.warning {
            severity = "WARN".to_string();
        }
        if val.error {
            severity = "EROR".to_string();
        }
        severity
    }};
}

#[macro_export]
macro_rules! instance_extensions {
    ($this:expr) => {{
        let val = vulkano::instance::InstanceExtensions {
            khr_android_surface: $this.khr_android_surface,
            khr_device_group_creation: $this.khr_device_group_creation,
            khr_display: $this.khr_display,
            khr_external_fence_capabilities: $this.khr_external_fence_capabilities,
            khr_external_memory_capabilities: $this.khr_external_memory_capabilities,
            khr_external_semaphore_capabilities: $this
                .khr_external_semaphore_capabilities,
            khr_get_display_properties2: $this.khr_get_display_properties2,
            khr_get_physical_device_properties2: $this
                .khr_get_physical_device_properties2,
            khr_get_surface_capabilities2: $this.khr_get_surface_capabilities2,
            khr_surface: $this.khr_surface,
            khr_surface_protected_capabilities: $this.khr_surface_protected_capabilities,
            khr_wayland_surface: $this.khr_wayland_surface,
            khr_win32_surface: $this.khr_win32_surface,
            khr_xcb_surface: $this.khr_xcb_surface,
            khr_xlib_surface: $this.khr_xlib_surface,
            ext_acquire_drm_display: $this.ext_acquire_drm_display,
            ext_acquire_xlib_display: $this.ext_acquire_xlib_display,
            ext_debug_report: $this.ext_debug_report,
            ext_debug_utils: $this.ext_debug_utils,
            ext_direct_mode_display: $this.ext_direct_mode_display,
            ext_directfb_surface: $this.ext_directfb_surface,
            ext_display_surface_counter: $this.ext_display_surface_counter,
            ext_headless_surface: $this.ext_headless_surface,
            ext_metal_surface: $this.ext_metal_surface,
            ext_swapchain_colorspace: $this.ext_swapchain_colorspace,
            ext_validation_features: $this.ext_validation_features,
            ext_validation_flags: $this.ext_validation_flags,
            fuchsia_imagepipe_surface: $this.fuchsia_imagepipe_surface,
            ggp_stream_descriptor_surface: $this.ggp_stream_descriptor_surface,
            mvk_ios_surface: $this.mvk_ios_surface,
            mvk_macos_surface: $this.mvk_macos_surface,
            nn_vi_surface: $this.nn_vi_surface,
            nv_external_memory_capabilities: $this.nv_external_memory_capabilities,
            qnx_screen_surface: $this.qnx_screen_surface,
            _unbuildable: $this._unbuildable,
        };

        let mut extensions: Vec<String> = vec![];
        append_fields![
            extensions,
            val,
            khr_android_surface,
            khr_device_group_creation,
            khr_display,
            khr_external_fence_capabilities,
            khr_external_memory_capabilities,
            khr_external_semaphore_capabilities,
            khr_get_display_properties2,
            khr_get_physical_device_properties2,
            khr_get_surface_capabilities2,
            khr_surface,
            khr_surface_protected_capabilities,
            khr_wayland_surface,
            khr_win32_surface,
            khr_xcb_surface,
            khr_xlib_surface,
            ext_acquire_drm_display,
            ext_acquire_xlib_display,
            ext_debug_report,
            ext_debug_utils,
            ext_direct_mode_display,
            ext_directfb_surface,
            ext_display_surface_counter,
            ext_headless_surface,
            ext_metal_surface,
            ext_swapchain_colorspace,
            ext_validation_features,
            ext_validation_flags,
            fuchsia_imagepipe_surface,
            ggp_stream_descriptor_surface,
            mvk_ios_surface,
            mvk_macos_surface,
            nn_vi_surface,
            nv_external_memory_capabilities,
            qnx_screen_surface,
        ];

        extensions
    }};
}

#[macro_export]
macro_rules! physical_device_extensions {
    ($this:expr) => {{
        let val = vulkano::device::DeviceExtensions {
            khr_16bit_storage: $this.khr_16bit_storage,
            khr_8bit_storage: $this.khr_8bit_storage,
            khr_acceleration_structure: $this.khr_acceleration_structure,
            khr_bind_memory2: $this.khr_bind_memory2,
            khr_buffer_device_address: $this.khr_buffer_device_address,
            khr_copy_commands2: $this.khr_copy_commands2,
            khr_create_renderpass2: $this.khr_create_renderpass2,
            khr_dedicated_allocation: $this.khr_dedicated_allocation,
            khr_deferred_host_operations: $this.khr_deferred_host_operations,
            khr_depth_stencil_resolve: $this.khr_depth_stencil_resolve,
            khr_descriptor_update_template: $this.khr_descriptor_update_template,
            khr_device_group: $this.khr_device_group,
            khr_display_swapchain: $this.khr_display_swapchain,
            khr_draw_indirect_count: $this.khr_draw_indirect_count,
            khr_driver_properties: $this.khr_driver_properties,
            khr_external_fence: $this.khr_external_fence,
            khr_external_fence_fd: $this.khr_external_fence_fd,
            khr_external_fence_win32: $this.khr_external_fence_win32,
            khr_external_memory: $this.khr_external_memory,
            khr_external_memory_fd: $this.khr_external_memory_fd,
            khr_external_memory_win32: $this.khr_external_memory_win32,
            khr_external_semaphore: $this.khr_external_semaphore,
            khr_external_semaphore_fd: $this.khr_external_semaphore_fd,
            khr_external_semaphore_win32: $this.khr_external_semaphore_win32,
            khr_fragment_shading_rate: $this.khr_fragment_shading_rate,
            khr_get_memory_requirements2: $this.khr_get_memory_requirements2,
            khr_image_format_list: $this.khr_image_format_list,
            khr_imageless_framebuffer: $this.khr_imageless_framebuffer,
            khr_incremental_present: $this.khr_incremental_present,
            khr_maintenance1: $this.khr_maintenance1,
            khr_maintenance2: $this.khr_maintenance2,
            khr_maintenance3: $this.khr_maintenance3,
            khr_multiview: $this.khr_multiview,
            khr_performance_query: $this.khr_performance_query,
            khr_pipeline_executable_properties: $this.khr_pipeline_executable_properties,
            khr_pipeline_library: $this.khr_pipeline_library,
            khr_portability_subset: $this.khr_portability_subset,
            khr_present_id: $this.khr_present_id,
            khr_present_wait: $this.khr_present_wait,
            khr_push_descriptor: $this.khr_push_descriptor,
            khr_ray_query: $this.khr_ray_query,
            khr_ray_tracing_pipeline: $this.khr_ray_tracing_pipeline,
            khr_relaxed_block_layout: $this.khr_relaxed_block_layout,
            khr_sampler_mirror_clamp_to_edge: $this.khr_sampler_mirror_clamp_to_edge,
            khr_sampler_ycbcr_conversion: $this.khr_sampler_ycbcr_conversion,
            khr_separate_depth_stencil_layouts: $this.khr_separate_depth_stencil_layouts,
            khr_shader_atomic_int64: $this.khr_shader_atomic_int64,
            khr_shader_clock: $this.khr_shader_clock,
            khr_shader_draw_parameters: $this.khr_shader_draw_parameters,
            khr_shader_float16_int8: $this.khr_shader_float16_int8,
            khr_shader_float_controls: $this.khr_shader_float_controls,
            khr_shader_integer_dot_product: $this.khr_shader_integer_dot_product,
            khr_shader_non_semantic_info: $this.khr_shader_non_semantic_info,
            khr_shader_subgroup_extended_types: $this.khr_shader_subgroup_extended_types,
            khr_shader_subgroup_uniform_control_flow: $this
                .khr_shader_subgroup_uniform_control_flow,
            khr_shader_terminate_invocation: $this.khr_shader_terminate_invocation,
            khr_shared_presentable_image: $this.khr_shared_presentable_image,
            khr_spirv_1_4: $this.khr_spirv_1_4,
            khr_storage_buffer_storage_class: $this.khr_storage_buffer_storage_class,
            khr_swapchain: $this.khr_swapchain,
            khr_swapchain_mutable_format: $this.khr_swapchain_mutable_format,
            khr_synchronization2: $this.khr_synchronization2,
            khr_timeline_semaphore: $this.khr_timeline_semaphore,
            khr_uniform_buffer_standard_layout: $this.khr_uniform_buffer_standard_layout,
            khr_variable_pointers: $this.khr_variable_pointers,
            khr_video_decode_queue: $this.khr_video_decode_queue,
            khr_video_encode_queue: $this.khr_video_encode_queue,
            khr_video_queue: $this.khr_video_queue,
            khr_vulkan_memory_model: $this.khr_vulkan_memory_model,
            khr_win32_keyed_mutex: $this.khr_win32_keyed_mutex,
            khr_workgroup_memory_explicit_layout: $this
                .khr_workgroup_memory_explicit_layout,
            khr_zero_initialize_workgroup_memory: $this
                .khr_zero_initialize_workgroup_memory,
            ext_4444_formats: $this.ext_4444_formats,
            ext_astc_decode_mode: $this.ext_astc_decode_mode,
            ext_blend_operation_advanced: $this.ext_blend_operation_advanced,
            ext_buffer_device_address: $this.ext_buffer_device_address,
            ext_calibrated_timestamps: $this.ext_calibrated_timestamps,
            ext_color_write_enable: $this.ext_color_write_enable,
            ext_conditional_rendering: $this.ext_conditional_rendering,
            ext_conservative_rasterization: $this.ext_conservative_rasterization,
            ext_custom_border_color: $this.ext_custom_border_color,
            ext_debug_marker: $this.ext_debug_marker,
            ext_depth_clip_enable: $this.ext_depth_clip_enable,
            ext_depth_range_unrestricted: $this.ext_depth_range_unrestricted,
            ext_descriptor_indexing: $this.ext_descriptor_indexing,
            ext_device_memory_report: $this.ext_device_memory_report,
            ext_discard_rectangles: $this.ext_discard_rectangles,
            ext_display_control: $this.ext_display_control,
            ext_extended_dynamic_state: $this.ext_extended_dynamic_state,
            ext_extended_dynamic_state2: $this.ext_extended_dynamic_state2,
            ext_external_memory_dma_buf: $this.ext_external_memory_dma_buf,
            ext_external_memory_host: $this.ext_external_memory_host,
            ext_filter_cubic: $this.ext_filter_cubic,
            ext_fragment_density_map: $this.ext_fragment_density_map,
            ext_fragment_density_map2: $this.ext_fragment_density_map2,
            ext_fragment_shader_interlock: $this.ext_fragment_shader_interlock,
            ext_full_screen_exclusive: $this.ext_full_screen_exclusive,
            ext_global_priority: $this.ext_global_priority,
            ext_global_priority_query: $this.ext_global_priority_query,
            ext_hdr_metadata: $this.ext_hdr_metadata,
            ext_host_query_reset: $this.ext_host_query_reset,
            ext_image_drm_format_modifier: $this.ext_image_drm_format_modifier,
            ext_image_robustness: $this.ext_image_robustness,
            ext_index_type_uint8: $this.ext_index_type_uint8,
            ext_inline_uniform_block: $this.ext_inline_uniform_block,
            ext_line_rasterization: $this.ext_line_rasterization,
            ext_load_store_op_none: $this.ext_load_store_op_none,
            ext_memory_budget: $this.ext_memory_budget,
            ext_memory_priority: $this.ext_memory_priority,
            ext_multi_draw: $this.ext_multi_draw,
            ext_pageable_device_local_memory: $this.ext_pageable_device_local_memory,
            ext_pci_bus_info: $this.ext_pci_bus_info,
            ext_physical_device_drm: $this.ext_physical_device_drm,
            ext_pipeline_creation_cache_control: $this
                .ext_pipeline_creation_cache_control,
            ext_pipeline_creation_feedback: $this.ext_pipeline_creation_feedback,
            ext_post_depth_coverage: $this.ext_post_depth_coverage,
            ext_primitive_topology_list_restart: $this
                .ext_primitive_topology_list_restart,
            ext_private_data: $this.ext_private_data,
            ext_provoking_vertex: $this.ext_provoking_vertex,
            ext_queue_family_foreign: $this.ext_queue_family_foreign,
            ext_robustness2: $this.ext_robustness2,
            ext_sample_locations: $this.ext_sample_locations,
            ext_sampler_filter_minmax: $this.ext_sampler_filter_minmax,
            ext_scalar_block_layout: $this.ext_scalar_block_layout,
            ext_separate_stencil_usage: $this.ext_separate_stencil_usage,
            ext_shader_atomic_float: $this.ext_shader_atomic_float,
            ext_shader_atomic_float2: $this.ext_shader_atomic_float2,
            ext_shader_demote_to_helper_invocation: $this
                .ext_shader_demote_to_helper_invocation,
            ext_shader_image_atomic_int64: $this.ext_shader_image_atomic_int64,
            ext_shader_stencil_export: $this.ext_shader_stencil_export,
            ext_shader_subgroup_ballot: $this.ext_shader_subgroup_ballot,
            ext_shader_subgroup_vote: $this.ext_shader_subgroup_vote,
            ext_shader_viewport_index_layer: $this.ext_shader_viewport_index_layer,
            ext_subgroup_size_control: $this.ext_subgroup_size_control,
            ext_texel_buffer_alignment: $this.ext_texel_buffer_alignment,
            ext_texture_compression_astc_hdr: $this.ext_texture_compression_astc_hdr,
            ext_tooling_info: $this.ext_tooling_info,
            ext_transform_feedback: $this.ext_transform_feedback,
            ext_validation_cache: $this.ext_validation_cache,
            ext_vertex_attribute_divisor: $this.ext_vertex_attribute_divisor,
            ext_vertex_input_dynamic_state: $this.ext_vertex_input_dynamic_state,
            ext_video_decode_h264: $this.ext_video_decode_h264,
            ext_video_decode_h265: $this.ext_video_decode_h265,
            ext_video_encode_h264: $this.ext_video_encode_h264,
            ext_ycbcr_2plane_444_formats: $this.ext_ycbcr_2plane_444_formats,
            ext_ycbcr_image_arrays: $this.ext_ycbcr_image_arrays,
            amd_buffer_marker: $this.amd_buffer_marker,
            amd_device_coherent_memory: $this.amd_device_coherent_memory,
            amd_display_native_hdr: $this.amd_display_native_hdr,
            amd_draw_indirect_count: $this.amd_draw_indirect_count,
            amd_gcn_shader: $this.amd_gcn_shader,
            amd_gpu_shader_half_float: $this.amd_gpu_shader_half_float,
            amd_gpu_shader_int16: $this.amd_gpu_shader_int16,
            amd_memory_overallocation_behavior: $this.amd_memory_overallocation_behavior,
            amd_mixed_attachment_samples: $this.amd_mixed_attachment_samples,
            amd_pipeline_compiler_control: $this.amd_pipeline_compiler_control,
            amd_rasterization_order: $this.amd_rasterization_order,
            amd_shader_ballot: $this.amd_shader_ballot,
            amd_shader_core_properties: $this.amd_shader_core_properties,
            amd_shader_core_properties2: $this.amd_shader_core_properties2,
            amd_shader_explicit_vertex_parameter: $this
                .amd_shader_explicit_vertex_parameter,
            amd_shader_fragment_mask: $this.amd_shader_fragment_mask,
            amd_shader_image_load_store_lod: $this.amd_shader_image_load_store_lod,
            amd_shader_info: $this.amd_shader_info,
            amd_shader_trinary_minmax: $this.amd_shader_trinary_minmax,
            amd_texture_gather_bias_lod: $this.amd_texture_gather_bias_lod,
            android_external_memory_android_hardware_buffer: $this
                .android_external_memory_android_hardware_buffer,
            fuchsia_external_memory: $this.fuchsia_external_memory,
            fuchsia_external_semaphore: $this.fuchsia_external_semaphore,
            ggp_frame_token: $this.ggp_frame_token,
            google_decorate_string: $this.google_decorate_string,
            google_display_timing: $this.google_display_timing,
            google_hlsl_functionality1: $this.google_hlsl_functionality1,
            google_user_type: $this.google_user_type,
            huawei_invocation_mask: $this.huawei_invocation_mask,
            huawei_subpass_shading: $this.huawei_subpass_shading,
            img_filter_cubic: $this.img_filter_cubic,
            img_format_pvrtc: $this.img_format_pvrtc,
            intel_performance_query: $this.intel_performance_query,
            intel_shader_integer_functions2: $this.intel_shader_integer_functions2,
            nvx_binary_import: $this.nvx_binary_import,
            nvx_image_view_handle: $this.nvx_image_view_handle,
            nvx_multiview_per_view_attributes: $this.nvx_multiview_per_view_attributes,
            nv_acquire_winrt_display: $this.nv_acquire_winrt_display,
            nv_clip_space_w_scaling: $this.nv_clip_space_w_scaling,
            nv_compute_shader_derivatives: $this.nv_compute_shader_derivatives,
            nv_cooperative_matrix: $this.nv_cooperative_matrix,
            nv_corner_sampled_image: $this.nv_corner_sampled_image,
            nv_coverage_reduction_mode: $this.nv_coverage_reduction_mode,
            nv_dedicated_allocation: $this.nv_dedicated_allocation,
            nv_dedicated_allocation_image_aliasing: $this
                .nv_dedicated_allocation_image_aliasing,
            nv_device_diagnostic_checkpoints: $this.nv_device_diagnostic_checkpoints,
            nv_device_diagnostics_config: $this.nv_device_diagnostics_config,
            nv_device_generated_commands: $this.nv_device_generated_commands,
            nv_external_memory: $this.nv_external_memory,
            nv_external_memory_rdma: $this.nv_external_memory_rdma,
            nv_external_memory_win32: $this.nv_external_memory_win32,
            nv_fill_rectangle: $this.nv_fill_rectangle,
            nv_fragment_coverage_to_color: $this.nv_fragment_coverage_to_color,
            nv_fragment_shader_barycentric: $this.nv_fragment_shader_barycentric,
            nv_fragment_shading_rate_enums: $this.nv_fragment_shading_rate_enums,
            nv_framebuffer_mixed_samples: $this.nv_framebuffer_mixed_samples,
            nv_geometry_shader_passthrough: $this.nv_geometry_shader_passthrough,
            nv_glsl_shader: $this.nv_glsl_shader,
            nv_inherited_viewport_scissor: $this.nv_inherited_viewport_scissor,
            nv_mesh_shader: $this.nv_mesh_shader,
            nv_ray_tracing: $this.nv_ray_tracing,
            nv_ray_tracing_motion_blur: $this.nv_ray_tracing_motion_blur,
            nv_representative_fragment_test: $this.nv_representative_fragment_test,
            nv_sample_mask_override_coverage: $this.nv_sample_mask_override_coverage,
            nv_scissor_exclusive: $this.nv_scissor_exclusive,
            nv_shader_image_footprint: $this.nv_shader_image_footprint,
            nv_shader_sm_builtins: $this.nv_shader_sm_builtins,
            nv_shader_subgroup_partitioned: $this.nv_shader_subgroup_partitioned,
            nv_shading_rate_image: $this.nv_shading_rate_image,
            nv_viewport_array2: $this.nv_viewport_array2,
            nv_viewport_swizzle: $this.nv_viewport_swizzle,
            nv_win32_keyed_mutex: $this.nv_win32_keyed_mutex,
            qcom_render_pass_shader_resolve: $this.qcom_render_pass_shader_resolve,
            qcom_render_pass_store_ops: $this.qcom_render_pass_store_ops,
            qcom_render_pass_transform: $this.qcom_render_pass_transform,
            qcom_rotated_copy_commands: $this.qcom_rotated_copy_commands,
            valve_mutable_descriptor_type: $this.valve_mutable_descriptor_type,
            _unbuildable: $this._unbuildable,
        };

        let mut extensions: Vec<String> = vec![];
        append_fields![
            extensions,
            val,
            khr_16bit_storage,
            khr_8bit_storage,
            khr_acceleration_structure,
            khr_bind_memory2,
            khr_buffer_device_address,
            khr_copy_commands2,
            khr_create_renderpass2,
            khr_dedicated_allocation,
            khr_deferred_host_operations,
            khr_depth_stencil_resolve,
            khr_descriptor_update_template,
            khr_device_group,
            khr_display_swapchain,
            khr_draw_indirect_count,
            khr_driver_properties,
            khr_external_fence,
            khr_external_fence_fd,
            khr_external_fence_win32,
            khr_external_memory,
            khr_external_memory_fd,
            khr_external_memory_win32,
            khr_external_semaphore,
            khr_external_semaphore_fd,
            khr_external_semaphore_win32,
            khr_fragment_shading_rate,
            khr_get_memory_requirements2,
            khr_image_format_list,
            khr_imageless_framebuffer,
            khr_incremental_present,
            khr_maintenance1,
            khr_maintenance2,
            khr_maintenance3,
            khr_multiview,
            khr_performance_query,
            khr_pipeline_executable_properties,
            khr_pipeline_library,
            khr_portability_subset,
            khr_present_id,
            khr_present_wait,
            khr_push_descriptor,
            khr_ray_query,
            khr_ray_tracing_pipeline,
            khr_relaxed_block_layout,
            khr_sampler_mirror_clamp_to_edge,
            khr_sampler_ycbcr_conversion,
            khr_separate_depth_stencil_layouts,
            khr_shader_atomic_int64,
            khr_shader_clock,
            khr_shader_draw_parameters,
            khr_shader_float16_int8,
            khr_shader_float_controls,
            khr_shader_integer_dot_product,
            khr_shader_non_semantic_info,
            khr_shader_subgroup_extended_types,
            khr_shader_subgroup_uniform_control_flow,
            khr_shader_terminate_invocation,
            khr_shared_presentable_image,
            khr_spirv_1_4,
            khr_storage_buffer_storage_class,
            khr_swapchain,
            khr_swapchain_mutable_format,
            khr_synchronization2,
            khr_timeline_semaphore,
            khr_uniform_buffer_standard_layout,
            khr_variable_pointers,
            khr_video_decode_queue,
            khr_video_encode_queue,
            khr_video_queue,
            khr_vulkan_memory_model,
            khr_win32_keyed_mutex,
            khr_workgroup_memory_explicit_layout,
            khr_zero_initialize_workgroup_memory,
            ext_4444_formats,
            ext_astc_decode_mode,
            ext_blend_operation_advanced,
            ext_buffer_device_address,
            ext_calibrated_timestamps,
            ext_color_write_enable,
            ext_conditional_rendering,
            ext_conservative_rasterization,
            ext_custom_border_color,
            ext_debug_marker,
            ext_depth_clip_enable,
            ext_depth_range_unrestricted,
            ext_descriptor_indexing,
            ext_device_memory_report,
            ext_discard_rectangles,
            ext_display_control,
            ext_extended_dynamic_state,
            ext_extended_dynamic_state2,
            ext_external_memory_dma_buf,
            ext_external_memory_host,
            ext_filter_cubic,
            ext_fragment_density_map,
            ext_fragment_density_map2,
            ext_fragment_shader_interlock,
            ext_full_screen_exclusive,
            ext_global_priority,
            ext_global_priority_query,
            ext_hdr_metadata,
            ext_host_query_reset,
            ext_image_drm_format_modifier,
            ext_image_robustness,
            ext_index_type_uint8,
            ext_inline_uniform_block,
            ext_line_rasterization,
            ext_load_store_op_none,
            ext_memory_budget,
            ext_memory_priority,
            ext_multi_draw,
            ext_pageable_device_local_memory,
            ext_pci_bus_info,
            ext_physical_device_drm,
            ext_pipeline_creation_cache_control,
            ext_pipeline_creation_feedback,
            ext_post_depth_coverage,
            ext_primitive_topology_list_restart,
            ext_private_data,
            ext_provoking_vertex,
            ext_queue_family_foreign,
            ext_robustness2,
            ext_sample_locations,
            ext_sampler_filter_minmax,
            ext_scalar_block_layout,
            ext_separate_stencil_usage,
            ext_shader_atomic_float,
            ext_shader_atomic_float2,
            ext_shader_demote_to_helper_invocation,
            ext_shader_image_atomic_int64,
            ext_shader_stencil_export,
            ext_shader_subgroup_ballot,
            ext_shader_subgroup_vote,
            ext_shader_viewport_index_layer,
            ext_subgroup_size_control,
            ext_texel_buffer_alignment,
            ext_texture_compression_astc_hdr,
            ext_tooling_info,
            ext_transform_feedback,
            ext_validation_cache,
            ext_vertex_attribute_divisor,
            ext_vertex_input_dynamic_state,
            ext_video_decode_h264,
            ext_video_decode_h265,
            ext_video_encode_h264,
            ext_ycbcr_2plane_444_formats,
            ext_ycbcr_image_arrays,
            amd_buffer_marker,
            amd_device_coherent_memory,
            amd_display_native_hdr,
            amd_draw_indirect_count,
            amd_gcn_shader,
            amd_gpu_shader_half_float,
            amd_gpu_shader_int16,
            amd_memory_overallocation_behavior,
            amd_mixed_attachment_samples,
            amd_pipeline_compiler_control,
            amd_rasterization_order,
            amd_shader_ballot,
            amd_shader_core_properties,
            amd_shader_core_properties2,
            amd_shader_explicit_vertex_parameter,
            amd_shader_fragment_mask,
            amd_shader_image_load_store_lod,
            amd_shader_info,
            amd_shader_trinary_minmax,
            amd_texture_gather_bias_lod,
            android_external_memory_android_hardware_buffer,
            fuchsia_external_memory,
            fuchsia_external_semaphore,
            ggp_frame_token,
            google_decorate_string,
            google_display_timing,
            google_hlsl_functionality1,
            google_user_type,
            huawei_invocation_mask,
            huawei_subpass_shading,
            img_filter_cubic,
            img_format_pvrtc,
            intel_performance_query,
            intel_shader_integer_functions2,
            nvx_binary_import,
            nvx_image_view_handle,
            nvx_multiview_per_view_attributes,
            nv_acquire_winrt_display,
            nv_clip_space_w_scaling,
            nv_compute_shader_derivatives,
            nv_cooperative_matrix,
            nv_corner_sampled_image,
            nv_coverage_reduction_mode,
            nv_dedicated_allocation,
            nv_dedicated_allocation_image_aliasing,
            nv_device_diagnostic_checkpoints,
            nv_device_diagnostics_config,
            nv_device_generated_commands,
            nv_external_memory,
            nv_external_memory_rdma,
            nv_external_memory_win32,
            nv_fill_rectangle,
            nv_fragment_coverage_to_color,
            nv_fragment_shader_barycentric,
            nv_fragment_shading_rate_enums,
            nv_framebuffer_mixed_samples,
            nv_geometry_shader_passthrough,
            nv_glsl_shader,
            nv_inherited_viewport_scissor,
            nv_mesh_shader,
            nv_ray_tracing,
            nv_ray_tracing_motion_blur,
            nv_representative_fragment_test,
            nv_sample_mask_override_coverage,
            nv_scissor_exclusive,
            nv_shader_image_footprint,
            nv_shader_sm_builtins,
            nv_shader_subgroup_partitioned,
            nv_shading_rate_image,
            nv_viewport_array2,
            nv_viewport_swizzle,
            nv_win32_keyed_mutex,
            qcom_render_pass_shader_resolve,
            qcom_render_pass_store_ops,
            qcom_render_pass_transform,
            qcom_rotated_copy_commands,
            valve_mutable_descriptor_type,
        ];

        extensions
    }};
}

//pub struct LimitItem {
//    name: String,
//    value: String,
//}
//
//impl PrettyRow for LimitItem {
//    fn to_format() -> prettytable::format::TableFormat {
//        *prettytable::format::consts::FORMAT_CLEAN
//    }
//
//    fn to_head() -> prettytable::Row {
//        row![Fy => "Limit-name", "-"]
//    }
//
//    fn to_row(&self) -> prettytable::Row {
//        row![self.name, self.value]
//    }
//}
//
//macro_rules! make_limits {
//    (method, $(($s:ident, $limit:ident, $field:ident),)*) => (
//        vec![
//            $(
//                LimitItem {
//                    name: stringify!($field).to_string(),
//                    value: $s($limit.$field()),
//                },
//            )*
//        ]
//    );
//    (dbg_method, $(($limit:ident, $field:ident),)*) => (
//        vec![
//            $(
//                LimitItem {
//                    name: stringify!($field).to_string(),
//                    value: format!("{:?}", $limit.$field()),
//                },
//            )*
//        ]
//    );
//    (field, $(($s:ident, $limit:ident, $field:ident),)*) => (
//        vec![
//            $(
//                LimitItem {
//                    name: stringify!($field).to_string(),
//                    value: $s($limit.$field),
//                },
//            )*
//        ]
//    );
//    (dbg_field, $(($limit:ident, $field:ident),)*) => (
//        vec![
//            $(
//                LimitItem {
//                    name: stringify!($field).to_string(),
//                    value: format!("{:?}", $limit.$field),
//                },
//            )*
//        ]
//    );
//}
//
//#[derive(Debug)]
//pub struct ChecklistItem {
//    pub(super) name: String,
//    pub(super) supported: bool,
//}
//
//impl PrettyRow for ChecklistItem {
//    fn to_format() -> prettytable::format::TableFormat {
//        *prettytable::format::consts::FORMAT_CLEAN
//    }
//
//    fn to_head() -> prettytable::Row {
//        row![Fy => "Name", "Supported"]
//    }
//
//    fn to_row(&self) -> prettytable::Row {
//        match self.supported {
//            true => row![self.name, Fg -> "✓"],
//            false => row![self.name, Fr -> "✗"],
//        }
//    }
//}
//
//macro_rules! make_check_list {
//    ($(($val:ident, $field:ident),)*) => (
//        vec![
//            $(
//                ChecklistItem {
//                    name: stringify!($field).to_string(),
//                    supported: $val.$field,
//                },
//            )*
//        ]
//    );
//}
//
//pub fn device_features<'a>(pd: PhysicalDevice<'a>) -> Vec<ChecklistItem> {
//    let f = pd.supported_features();
//
//    make_check_list![
//        (f, acceleration_structure),
//        (f, acceleration_structure_capture_replay),
//        (f, acceleration_structure_host_commands),
//        (f, acceleration_structure_indirect_build),
//        (f, advanced_blend_coherent_operations),
//        (f, alpha_to_one),
//        (f, attachment_fragment_shading_rate),
//        (f, bresenham_lines),
//        (f, buffer_device_address),
//        (f, buffer_device_address_capture_replay),
//        (f, buffer_device_address_multi_device),
//        (f, compute_derivative_group_linear),
//        (f, compute_derivative_group_quads),
//        (f, compute_full_subgroups),
//        (f, conditional_rendering),
//        (f, constant_alpha_color_blend_factors),
//        (f, cooperative_matrix),
//        (f, cooperative_matrix_robust_buffer_access),
//        (f, corner_sampled_image),
//        (f, coverage_reduction_mode),
//        (f, custom_border_color_without_format),
//        (f, custom_border_colors),
//        (f, decode_mode_shared_exponent),
//        (f, dedicated_allocation_image_aliasing),
//        (f, depth_bias_clamp),
//        (f, depth_bounds),
//        (f, depth_clamp),
//        (f, depth_clip_enable),
//        (
//            f,
//            descriptor_binding_acceleration_structure_update_after_bind
//        ),
//        (f, descriptor_binding_inline_uniform_block_update_after_bind),
//        (f, descriptor_binding_partially_bound),
//        (f, descriptor_binding_sampled_image_update_after_bind),
//        (f, descriptor_binding_storage_buffer_update_after_bind),
//        (f, descriptor_binding_storage_image_update_after_bind),
//        (f, descriptor_binding_storage_texel_buffer_update_after_bind),
//        (f, descriptor_binding_uniform_buffer_update_after_bind),
//        (f, descriptor_binding_uniform_texel_buffer_update_after_bind),
//        (f, descriptor_binding_update_unused_while_pending),
//        (f, descriptor_binding_variable_descriptor_count),
//        (f, descriptor_indexing),
//        (f, device_coherent_memory),
//        (f, device_generated_commands),
//        (f, device_memory_report),
//        (f, diagnostics_config),
//        (f, draw_indirect_count),
//        (f, draw_indirect_first_instance),
//        (f, dual_src_blend),
//        (f, events),
//        (f, exclusive_scissor),
//        (f, extended_dynamic_state),
//        (f, fill_mode_non_solid),
//        (f, format_a4b4g4r4),
//        (f, format_a4r4g4b4),
//        (f, fragment_density_map),
//        (f, fragment_density_map_deferred),
//        (f, fragment_density_map_dynamic),
//        (f, fragment_density_map_non_subsampled_images),
//        (f, fragment_shader_barycentric),
//        (f, fragment_shader_pixel_interlock),
//        (f, fragment_shader_sample_interlock),
//        (f, fragment_shader_shading_rate_interlock),
//        (f, fragment_shading_rate_enums),
//        (f, fragment_stores_and_atomics),
//        (f, full_draw_index_uint32),
//        (f, geometry_shader),
//        (f, geometry_streams),
//        (f, host_query_reset),
//        (f, image_cube_array),
//        (f, image_footprint),
//        (f, image_view2_d_on3_d_image),
//        (f, image_view_format_reinterpretation),
//        (f, image_view_format_swizzle),
//        (f, imageless_framebuffer),
//        (f, independent_blend),
//        (f, index_type_uint8),
//        (f, inherited_conditional_rendering),
//        (f, inherited_queries),
//        (f, inline_uniform_block),
//        (f, large_points),
//        (f, logic_op),
//        (f, memory_priority),
//        (f, mesh_shader),
//        (f, multi_draw_indirect),
//        (f, multi_viewport),
//        (f, multisample_array_image),
//        (f, multiview),
//        (f, multiview_geometry_shader),
//        (f, multiview_tessellation_shader),
//        (f, mutable_comparison_samplers),
//        (f, mutable_descriptor_type),
//        (f, no_invocation_fragment_shading_rates),
//        (f, null_descriptor),
//        (f, occlusion_query_precise),
//        (f, performance_counter_multiple_query_pools),
//        (f, performance_counter_query_pools),
//        (f, pipeline_creation_cache_control),
//        (f, pipeline_executable_info),
//        (f, pipeline_fragment_shading_rate),
//        (f, pipeline_statistics_query),
//        (f, point_polygons),
//        (f, primitive_fragment_shading_rate),
//        (f, private_data),
//        (f, protected_memory),
//        (f, ray_query),
//        (f, ray_tracing_pipeline),
//        (f, ray_tracing_pipeline_shader_group_handle_capture_replay),
//        (
//            f,
//            ray_tracing_pipeline_shader_group_handle_capture_replay_mixed
//        ),
//        (f, ray_tracing_pipeline_trace_rays_indirect),
//        (f, ray_traversal_primitive_culling),
//        (f, rectangular_lines),
//        (f, representative_fragment_test),
//        (f, robust_buffer_access),
//        (f, robust_buffer_access2),
//        (f, robust_image_access),
//        (f, robust_image_access2),
//        (f, runtime_descriptor_array),
//        (f, sample_rate_shading),
//        (f, sampler_anisotropy),
//        (f, sampler_filter_minmax),
//        (f, sampler_mip_lod_bias),
//        (f, sampler_mirror_clamp_to_edge),
//        (f, sampler_ycbcr_conversion),
//        (f, scalar_block_layout),
//        (f, separate_depth_stencil_layouts),
//        (f, separate_stencil_mask_ref),
//        (f, shader_buffer_float32_atomic_add),
//        (f, shader_buffer_float32_atomics),
//        (f, shader_buffer_float64_atomic_add),
//        (f, shader_buffer_float64_atomics),
//        (f, shader_buffer_int64_atomics),
//        (f, shader_clip_distance),
//        (f, shader_cull_distance),
//        (f, shader_demote_to_helper_invocation),
//        (f, shader_device_clock),
//        (f, shader_draw_parameters),
//        (f, shader_float16),
//        (f, shader_float64),
//        (f, shader_image_float32_atomic_add),
//        (f, shader_image_float32_atomics),
//        (f, shader_image_gather_extended),
//        (f, shader_image_int64_atomics),
//        (f, shader_input_attachment_array_dynamic_indexing),
//        (f, shader_input_attachment_array_non_uniform_indexing),
//        (f, shader_int16),
//        (f, shader_int64),
//        (f, shader_int8),
//        (f, shader_integer_functions2),
//        (f, shader_output_layer),
//        (f, shader_output_viewport_index),
//        (f, shader_resource_min_lod),
//        (f, shader_resource_residency),
//        (f, shader_sample_rate_interpolation_functions),
//        (f, shader_sampled_image_array_dynamic_indexing),
//        (f, shader_sampled_image_array_non_uniform_indexing),
//        (f, shader_shared_float32_atomic_add),
//        (f, shader_shared_float32_atomics),
//        (f, shader_shared_float64_atomic_add),
//        (f, shader_shared_float64_atomics),
//        (f, shader_shared_int64_atomics),
//        (f, shader_sm_builtins),
//        (f, shader_storage_buffer_array_dynamic_indexing),
//        (f, shader_storage_buffer_array_non_uniform_indexing),
//        (f, shader_storage_image_array_dynamic_indexing),
//        (f, shader_storage_image_array_non_uniform_indexing),
//        (f, shader_storage_image_extended_formats),
//        (f, shader_storage_image_multisample),
//        (f, shader_storage_image_read_without_format),
//        (f, shader_storage_image_write_without_format),
//        (f, shader_storage_texel_buffer_array_dynamic_indexing),
//        (f, shader_storage_texel_buffer_array_non_uniform_indexing),
//        (f, shader_subgroup_clock),
//        (f, shader_subgroup_extended_types),
//        (f, shader_terminate_invocation),
//        (f, shader_tessellation_and_geometry_point_size),
//        (f, shader_uniform_buffer_array_dynamic_indexing),
//        (f, shader_uniform_buffer_array_non_uniform_indexing),
//        (f, shader_uniform_texel_buffer_array_dynamic_indexing),
//        (f, shader_uniform_texel_buffer_array_non_uniform_indexing),
//        (f, shader_zero_initialize_workgroup_memory),
//        (f, shading_rate_coarse_sample_order),
//        (f, shading_rate_image),
//        (f, smooth_lines),
//        (f, sparse_binding),
//        (f, sparse_image_float32_atomic_add),
//        (f, sparse_image_float32_atomics),
//        (f, sparse_image_int64_atomics),
//        (f, sparse_residency16_samples),
//        (f, sparse_residency2_samples),
//        (f, sparse_residency4_samples),
//        (f, sparse_residency8_samples),
//        (f, sparse_residency_aliased),
//        (f, sparse_residency_buffer),
//        (f, sparse_residency_image2_d),
//        (f, sparse_residency_image3_d),
//        (f, stippled_bresenham_lines),
//        (f, stippled_rectangular_lines),
//        (f, stippled_smooth_lines),
//        (f, storage_buffer16_bit_access),
//        (f, storage_buffer8_bit_access),
//        (f, storage_input_output16),
//        (f, storage_push_constant16),
//        (f, storage_push_constant8),
//        (f, subgroup_broadcast_dynamic_id),
//        (f, subgroup_size_control),
//        (f, supersample_fragment_shading_rates),
//        (f, task_shader),
//        (f, tessellation_isolines),
//        (f, tessellation_point_mode),
//        (f, tessellation_shader),
//        (f, texel_buffer_alignment),
//        (f, texture_compression_astc_hdr),
//        (f, texture_compression_astc_ldr),
//        (f, texture_compression_bc),
//        (f, texture_compression_etc2),
//        (f, timeline_semaphore),
//        (f, transform_feedback),
//        (f, triangle_fans),
//        (f, uniform_and_storage_buffer16_bit_access),
//        (f, uniform_and_storage_buffer8_bit_access),
//        (f, uniform_buffer_standard_layout),
//        (f, variable_multisample_rate),
//        (f, variable_pointers),
//        (f, variable_pointers_storage_buffer),
//        (f, vertex_attribute_access_beyond_stride),
//        (f, vertex_attribute_instance_rate_divisor),
//        (f, vertex_attribute_instance_rate_zero_divisor),
//        (f, vertex_pipeline_stores_and_atomics),
//        (f, vulkan_memory_model),
//        (f, vulkan_memory_model_availability_visibility_chains),
//        (f, vulkan_memory_model_device_scope),
//        (f, wide_lines),
//        (f, workgroup_memory_explicit_layout),
//        (f, workgroup_memory_explicit_layout16_bit_access),
//        (f, workgroup_memory_explicit_layout8_bit_access),
//        (f, workgroup_memory_explicit_layout_scalar_block_layout),
//        (f, ycbcr_image_arrays),
//    ]
//}
//
//pub fn instance_extensions() -> Vec<ChecklistItem> {
//    use vulkano::instance::InstanceExtensions;
//
//    let iextns = InstanceExtensions::supported_by_core().unwrap();
//
//    make_check_list![
//        (iextns, khr_android_surface),
//        (iextns, khr_device_group_creation),
//        (iextns, khr_display),
//        (iextns, khr_external_fence_capabilities),
//        (iextns, khr_external_memory_capabilities),
//        (iextns, khr_external_semaphore_capabilities),
//        (iextns, khr_get_display_properties2),
//        (iextns, khr_get_physical_device_properties2),
//        (iextns, khr_get_surface_capabilities2),
//        (iextns, khr_surface),
//        (iextns, khr_surface_protected_capabilities),
//        (iextns, khr_wayland_surface),
//        (iextns, khr_win32_surface),
//        (iextns, khr_xcb_surface),
//        (iextns, khr_xlib_surface),
//        (iextns, ext_acquire_xlib_display),
//        (iextns, ext_debug_report),
//        (iextns, ext_debug_utils),
//        (iextns, ext_direct_mode_display),
//        (iextns, ext_directfb_surface),
//        (iextns, ext_display_surface_counter),
//        (iextns, ext_headless_surface),
//        (iextns, ext_metal_surface),
//        (iextns, ext_swapchain_colorspace),
//        (iextns, ext_validation_features),
//        (iextns, ext_validation_flags),
//        (iextns, fuchsia_imagepipe_surface),
//        (iextns, ggp_stream_descriptor_surface),
//        (iextns, mvk_ios_surface),
//        (iextns, mvk_macos_surface),
//        (iextns, nn_vi_surface),
//        (iextns, nv_external_memory_capabilities),
//    ]
//}
//
//pub fn device_extensions<'a>(pd: PhysicalDevice<'a>) -> Vec<ChecklistItem> {
//    use vulkano::device::DeviceExtensions;
//
//    let dextns = DeviceExtensions::supported_by_device(pd);
//
//    make_check_list![
//        (dextns, khr_16bit_storage),
//        (dextns, khr_8bit_storage),
//        (dextns, khr_acceleration_structure),
//        (dextns, khr_bind_memory2),
//        (dextns, khr_buffer_device_address),
//        (dextns, khr_copy_commands2),
//        (dextns, khr_create_renderpass2),
//        (dextns, khr_dedicated_allocation),
//        (dextns, khr_deferred_host_operations),
//        (dextns, khr_depth_stencil_resolve),
//        (dextns, khr_descriptor_update_template),
//        (dextns, khr_device_group),
//        (dextns, khr_display_swapchain),
//        (dextns, khr_draw_indirect_count),
//        (dextns, khr_driver_properties),
//        (dextns, khr_external_fence),
//        (dextns, khr_external_fence_fd),
//        (dextns, khr_external_fence_win32),
//        (dextns, khr_external_memory),
//        (dextns, khr_external_memory_fd),
//        (dextns, khr_external_memory_win32),
//        (dextns, khr_external_semaphore),
//        (dextns, khr_external_semaphore_fd),
//        (dextns, khr_external_semaphore_win32),
//        (dextns, khr_fragment_shading_rate),
//        (dextns, khr_get_memory_requirements2),
//        (dextns, khr_image_format_list),
//        (dextns, khr_imageless_framebuffer),
//        (dextns, khr_incremental_present),
//        (dextns, khr_maintenance1),
//        (dextns, khr_maintenance2),
//        (dextns, khr_maintenance3),
//        (dextns, khr_multiview),
//        (dextns, khr_performance_query),
//        (dextns, khr_pipeline_executable_properties),
//        (dextns, khr_pipeline_library),
//        (dextns, khr_portability_subset),
//        (dextns, khr_push_descriptor),
//        (dextns, khr_ray_query),
//        (dextns, khr_ray_tracing_pipeline),
//        (dextns, khr_relaxed_block_layout),
//        (dextns, khr_sampler_mirror_clamp_to_edge),
//        (dextns, khr_sampler_ycbcr_conversion),
//        (dextns, khr_separate_depth_stencil_layouts),
//        (dextns, khr_shader_atomic_int64),
//        (dextns, khr_shader_clock),
//        (dextns, khr_shader_draw_parameters),
//        (dextns, khr_shader_float16_int8),
//        (dextns, khr_shader_float_controls),
//        (dextns, khr_shader_non_semantic_info),
//        (dextns, khr_shader_subgroup_extended_types),
//        (dextns, khr_shader_terminate_invocation),
//        (dextns, khr_shared_presentable_image),
//        (dextns, khr_spirv_1_4),
//        (dextns, khr_storage_buffer_storage_class),
//        (dextns, khr_swapchain),
//        (dextns, khr_swapchain_mutable_format),
//        (dextns, khr_timeline_semaphore),
//        (dextns, khr_uniform_buffer_standard_layout),
//        (dextns, khr_variable_pointers),
//        (dextns, khr_vulkan_memory_model),
//        (dextns, khr_win32_keyed_mutex),
//        (dextns, khr_workgroup_memory_explicit_layout),
//        (dextns, khr_zero_initialize_workgroup_memory),
//        (dextns, ext_4444_formats),
//        (dextns, ext_astc_decode_mode),
//        (dextns, ext_blend_operation_advanced),
//        (dextns, ext_buffer_device_address),
//        (dextns, ext_calibrated_timestamps),
//        (dextns, ext_conditional_rendering),
//        (dextns, ext_conservative_rasterization),
//        (dextns, ext_custom_border_color),
//        (dextns, ext_debug_marker),
//        (dextns, ext_depth_clip_enable),
//        (dextns, ext_depth_range_unrestricted),
//        (dextns, ext_descriptor_indexing),
//        (dextns, ext_device_memory_report),
//        (dextns, ext_discard_rectangles),
//        (dextns, ext_display_control),
//        (dextns, ext_extended_dynamic_state),
//        (dextns, ext_external_memory_dma_buf),
//        (dextns, ext_external_memory_host),
//        (dextns, ext_filter_cubic),
//        (dextns, ext_fragment_density_map),
//        (dextns, ext_fragment_density_map2),
//        (dextns, ext_fragment_shader_interlock),
//        (dextns, ext_full_screen_exclusive),
//        (dextns, ext_global_priority),
//        (dextns, ext_hdr_metadata),
//        (dextns, ext_host_query_reset),
//        (dextns, ext_image_drm_format_modifier),
//        (dextns, ext_image_robustness),
//        (dextns, ext_index_type_uint8),
//        (dextns, ext_inline_uniform_block),
//        (dextns, ext_line_rasterization),
//        (dextns, ext_memory_budget),
//        (dextns, ext_memory_priority),
//        (dextns, ext_pci_bus_info),
//        (dextns, ext_pipeline_creation_cache_control),
//        (dextns, ext_pipeline_creation_feedback),
//        (dextns, ext_post_depth_coverage),
//        (dextns, ext_private_data),
//        (dextns, ext_queue_family_foreign),
//        (dextns, ext_robustness2),
//        (dextns, ext_sample_locations),
//        (dextns, ext_sampler_filter_minmax),
//        (dextns, ext_scalar_block_layout),
//        (dextns, ext_separate_stencil_usage),
//        (dextns, ext_shader_atomic_float),
//        (dextns, ext_shader_demote_to_helper_invocation),
//        (dextns, ext_shader_image_atomic_int64),
//        (dextns, ext_shader_stencil_export),
//        (dextns, ext_shader_subgroup_ballot),
//        (dextns, ext_shader_subgroup_vote),
//        (dextns, ext_shader_viewport_index_layer),
//        (dextns, ext_subgroup_size_control),
//        (dextns, ext_texel_buffer_alignment),
//        (dextns, ext_texture_compression_astc_hdr),
//        (dextns, ext_tooling_info),
//        (dextns, ext_transform_feedback),
//        (dextns, ext_validation_cache),
//        (dextns, ext_vertex_attribute_divisor),
//        (dextns, ext_ycbcr_image_arrays),
//        (dextns, amd_buffer_marker),
//        (dextns, amd_device_coherent_memory),
//        (dextns, amd_display_native_hdr),
//        (dextns, amd_draw_indirect_count),
//        (dextns, amd_gcn_shader),
//        (dextns, amd_gpu_shader_half_float),
//        (dextns, amd_gpu_shader_int16),
//        (dextns, amd_memory_overallocation_behavior),
//        (dextns, amd_mixed_attachment_samples),
//        (dextns, amd_pipeline_compiler_control),
//        (dextns, amd_rasterization_order),
//        (dextns, amd_shader_ballot),
//        (dextns, amd_shader_core_properties),
//        (dextns, amd_shader_core_properties2),
//        (dextns, amd_shader_explicit_vertex_parameter),
//        (dextns, amd_shader_fragment_mask),
//        (dextns, amd_shader_image_load_store_lod),
//        (dextns, amd_shader_info),
//        (dextns, amd_shader_trinary_minmax),
//        (dextns, amd_texture_gather_bias_lod),
//        (dextns, android_external_memory_android_hardware_buffer),
//        (dextns, ggp_frame_token),
//        (dextns, google_decorate_string),
//        (dextns, google_display_timing),
//        (dextns, google_hlsl_functionality1),
//        (dextns, google_user_type),
//        (dextns, img_filter_cubic),
//        (dextns, img_format_pvrtc),
//        (dextns, intel_performance_query),
//        (dextns, intel_shader_integer_functions2),
//        (dextns, nvx_image_view_handle),
//        (dextns, nvx_multiview_per_view_attributes),
//        (dextns, nv_acquire_winrt_display),
//        (dextns, nv_clip_space_w_scaling),
//        (dextns, nv_compute_shader_derivatives),
//        (dextns, nv_cooperative_matrix),
//        (dextns, nv_corner_sampled_image),
//        (dextns, nv_coverage_reduction_mode),
//        (dextns, nv_dedicated_allocation),
//        (dextns, nv_dedicated_allocation_image_aliasing),
//        (dextns, nv_device_diagnostic_checkpoints),
//        (dextns, nv_device_diagnostics_config),
//        (dextns, nv_device_generated_commands),
//        (dextns, nv_external_memory),
//        (dextns, nv_external_memory_win32),
//        (dextns, nv_fill_rectangle),
//        (dextns, nv_fragment_coverage_to_color),
//        (dextns, nv_fragment_shader_barycentric),
//        (dextns, nv_fragment_shading_rate_enums),
//        (dextns, nv_framebuffer_mixed_samples),
//        (dextns, nv_geometry_shader_passthrough),
//        (dextns, nv_glsl_shader),
//        (dextns, nv_mesh_shader),
//        (dextns, nv_ray_tracing),
//        (dextns, nv_representative_fragment_test),
//        (dextns, nv_sample_mask_override_coverage),
//        (dextns, nv_scissor_exclusive),
//        (dextns, nv_shader_image_footprint),
//        (dextns, nv_shader_sm_builtins),
//        (dextns, nv_shader_subgroup_partitioned),
//        (dextns, nv_shading_rate_image),
//        (dextns, nv_viewport_array2),
//        (dextns, nv_viewport_swizzle),
//        (dextns, nv_win32_keyed_mutex),
//        (dextns, qcom_render_pass_shader_resolve),
//        (dextns, qcom_render_pass_store_ops),
//        (dextns, qcom_render_pass_transform),
//        (dextns, qcom_rotated_copy_commands),
//        (dextns, valve_mutable_descriptor_type),
//    ]
//}
//
//pub fn surface_capabilities(c: Capabilities) -> Vec<LimitItem> {
//    let mut limits = make_limits![
//        dbg_field,
//        (c, min_image_count),
//        (c, max_image_count),
//        (c, current_extent),
//        (c, min_image_extent),
//        (c, max_image_extent),
//        (c, max_image_array_layers),
//        (c, current_transform),
//        (c, supported_formats),
//    ];
//    limits.extend(make_limits![
//        field,
//        (surface_transforms, c, supported_transforms),
//        (composite_alpha, c, supported_composite_alpha),
//        (image_usage, c, supported_usage_flags),
//        (present_modes, c, present_modes),
//    ]);
//    limits
//}
//
//fn surface_transforms(val: SupportedSurfaceTransforms) -> String {
//    let ss: Vec<&str> = make_list![
//        (val, identity),
//        (val, rotate90),
//        (val, rotate180),
//        (val, rotate270),
//        (val, horizontal_mirror),
//        (val, horizontal_mirror_rotate90),
//        (val, horizontal_mirror_rotate180),
//        (val, horizontal_mirror_rotate270),
//        (val, inherit),
//    ]
//    .into_iter()
//    .filter(|s| s.len() > 0)
//    .collect();
//    ss.join(", ")
//}
//
//fn composite_alpha(val: SupportedCompositeAlpha) -> String {
//    let ss: Vec<&str> = make_list![
//        (val, opaque),
//        (val, pre_multiplied),
//        (val, post_multiplied),
//        (val, inherit),
//    ]
//    .into_iter()
//    .filter(|s| s.len() > 0)
//    .collect();
//    ss.join(", ")
//}
//
//fn image_usage(val: ImageUsage) -> String {
//    let ss: Vec<&str> = make_list![
//        (val, transfer_source),
//        (val, transfer_destination),
//        (val, sampled),
//        (val, storage),
//        (val, color_attachment),
//        (val, depth_stencil_attachment),
//        (val, transient_attachment),
//        (val, input_attachment),
//    ]
//    .into_iter()
//    .filter(|s| s.len() > 0)
//    .collect();
//    ss.join(", ")
//}
//
//fn present_modes(val: SupportedPresentModes) -> String {
//    let ss: Vec<&str> = make_list![
//        (val, immediate),
//        (val, mailbox),
//        (val, fifo),
//        (val, relaxed),
//        (val, shared_demand),
//        (val, shared_continuous),
//    ]
//    .into_iter()
//    .filter(|s| s.len() > 0)
//    .collect();
//    ss.join(", ")
//}
//
//pub struct ImageFormat {
//    format: Format,
//    ty: ImageType,
//    tiling: ImageTiling,
//    usage: ImageUsage,
//    props: ImageFormatProperties,
//}
//
//impl PrettyRow for ImageFormat {
//    fn to_format() -> prettytable::format::TableFormat {
//        *prettytable::format::consts::FORMAT_CLEAN
//    }
//
//    fn to_head() -> prettytable::Row {
//        row![Fy =>
//            "Format", "Type", "Tiling", "Usage",
//            "max_extent", "max_mip_levels", "max_array_layers", "sample_counts",
//            "max_resource_size"
//        ]
//    }
//
//    fn to_row(&self) -> prettytable::Row {
//        let sample_val = self.props.sample_counts;
//        let sample_counts: Vec<&str> = make_list![
//            (sample_val, sample1, "1"),
//            (sample_val, sample2, "2"),
//            (sample_val, sample4, "4"),
//            (sample_val, sample8, "8"),
//            (sample_val, sample16, "16"),
//            (sample_val, sample32, "32"),
//            (sample_val, sample64, "64"),
//        ]
//        .into_iter()
//        .filter(|s| s.len() > 0)
//        .collect();
//
//        row![
//            format!("{:?}", self.format),
//            format!("{:?}", self.ty),
//            format!("{:?}", self.tiling),
//            image_usage(self.usage),
//            format!("{:?}", self.props.max_extent),
//            format!("{:?}", self.props.max_mip_levels),
//            self.props.max_array_layers,
//            sample_counts.join(","),
//            self.props.max_resource_size,
//        ]
//    }
//}
//
//impl ImageFormat {
//    pub fn new(
//        format: Format,
//        ty: ImageType,
//        tiling: ImageTiling,
//        usage: ImageUsage,
//        props: ImageFormatProperties,
//    ) -> Self {
//        ImageFormat {
//            format,
//            ty,
//            tiling,
//            usage,
//            props,
//        }
//    }
//}
//
//pub fn format_list() -> Vec<Format> {
//    vec![
//        Format::R4G4UnormPack8,
//        Format::R4G4B4A4UnormPack16,
//        Format::B4G4R4A4UnormPack16,
//        Format::R5G6B5UnormPack16,
//        Format::B5G6R5UnormPack16,
//        Format::R5G5B5A1UnormPack16,
//        Format::B5G5R5A1UnormPack16,
//        Format::A1R5G5B5UnormPack16,
//        Format::R8Unorm,
//        Format::R8Snorm,
//        Format::R8Uscaled,
//        Format::R8Sscaled,
//        Format::R8Uint,
//        Format::R8Sint,
//        Format::R8Srgb,
//        Format::R8G8Unorm,
//        Format::R8G8Snorm,
//        Format::R8G8Uscaled,
//        Format::R8G8Sscaled,
//        Format::R8G8Uint,
//        Format::R8G8Sint,
//        Format::R8G8Srgb,
//        Format::R8G8B8Unorm,
//        Format::R8G8B8Snorm,
//        Format::R8G8B8Uscaled,
//        Format::R8G8B8Sscaled,
//        Format::R8G8B8Uint,
//        Format::R8G8B8Sint,
//        Format::R8G8B8Srgb,
//        Format::B8G8R8Unorm,
//        Format::B8G8R8Snorm,
//        Format::B8G8R8Uscaled,
//        Format::B8G8R8Sscaled,
//        Format::B8G8R8Uint,
//        Format::B8G8R8Sint,
//        Format::B8G8R8Srgb,
//        Format::R8G8B8A8Unorm,
//        Format::R8G8B8A8Snorm,
//        Format::R8G8B8A8Uscaled,
//        Format::R8G8B8A8Sscaled,
//        Format::R8G8B8A8Uint,
//        Format::R8G8B8A8Sint,
//        Format::R8G8B8A8Srgb,
//        Format::B8G8R8A8Unorm,
//        Format::B8G8R8A8Snorm,
//        Format::B8G8R8A8Uscaled,
//        Format::B8G8R8A8Sscaled,
//        Format::B8G8R8A8Uint,
//        Format::B8G8R8A8Sint,
//        Format::B8G8R8A8Srgb,
//        Format::A8B8G8R8UnormPack32,
//        Format::A8B8G8R8SnormPack32,
//        Format::A8B8G8R8UscaledPack32,
//        Format::A8B8G8R8SscaledPack32,
//        Format::A8B8G8R8UintPack32,
//        Format::A8B8G8R8SintPack32,
//        Format::A8B8G8R8SrgbPack32,
//        Format::A2R10G10B10UnormPack32,
//        Format::A2R10G10B10SnormPack32,
//        Format::A2R10G10B10UscaledPack32,
//        Format::A2R10G10B10SscaledPack32,
//        Format::A2R10G10B10UintPack32,
//        Format::A2R10G10B10SintPack32,
//        Format::A2B10G10R10UnormPack32,
//        Format::A2B10G10R10SnormPack32,
//        Format::A2B10G10R10UscaledPack32,
//        Format::A2B10G10R10SscaledPack32,
//        Format::A2B10G10R10UintPack32,
//        Format::A2B10G10R10SintPack32,
//        Format::R16Unorm,
//        Format::R16Snorm,
//        Format::R16Uscaled,
//        Format::R16Sscaled,
//        Format::R16Uint,
//        Format::R16Sint,
//        Format::R16Sfloat,
//        Format::R16G16Unorm,
//        Format::R16G16Snorm,
//        Format::R16G16Uscaled,
//        Format::R16G16Sscaled,
//        Format::R16G16Uint,
//        Format::R16G16Sint,
//        Format::R16G16Sfloat,
//        Format::R16G16B16Unorm,
//        Format::R16G16B16Snorm,
//        Format::R16G16B16Uscaled,
//        Format::R16G16B16Sscaled,
//        Format::R16G16B16Uint,
//        Format::R16G16B16Sint,
//        Format::R16G16B16Sfloat,
//        Format::R16G16B16A16Unorm,
//        Format::R16G16B16A16Snorm,
//        Format::R16G16B16A16Uscaled,
//        Format::R16G16B16A16Sscaled,
//        Format::R16G16B16A16Uint,
//        Format::R16G16B16A16Sint,
//        Format::R16G16B16A16Sfloat,
//        Format::R32Uint,
//        Format::R32Sint,
//        Format::R32Sfloat,
//        Format::R32G32Uint,
//        Format::R32G32Sint,
//        Format::R32G32Sfloat,
//        Format::R32G32B32Uint,
//        Format::R32G32B32Sint,
//        Format::R32G32B32Sfloat,
//        Format::R32G32B32A32Uint,
//        Format::R32G32B32A32Sint,
//        Format::R32G32B32A32Sfloat,
//        Format::R64Uint,
//        Format::R64Sint,
//        Format::R64Sfloat,
//        Format::R64G64Uint,
//        Format::R64G64Sint,
//        Format::R64G64Sfloat,
//        Format::R64G64B64Uint,
//        Format::R64G64B64Sint,
//        Format::R64G64B64Sfloat,
//        Format::R64G64B64A64Uint,
//        Format::R64G64B64A64Sint,
//        Format::R64G64B64A64Sfloat,
//        Format::B10G11R11UfloatPack32,
//        Format::E5B9G9R9UfloatPack32,
//        Format::D16Unorm,
//        Format::X8_D24UnormPack32,
//        Format::D32Sfloat,
//        Format::S8Uint,
//        Format::D16Unorm_S8Uint,
//        Format::D24Unorm_S8Uint,
//        Format::D32Sfloat_S8Uint,
//        Format::BC1_RGBUnormBlock,
//        Format::BC1_RGBSrgbBlock,
//        Format::BC1_RGBAUnormBlock,
//        Format::BC1_RGBASrgbBlock,
//        Format::BC2UnormBlock,
//        Format::BC2SrgbBlock,
//        Format::BC3UnormBlock,
//        Format::BC3SrgbBlock,
//        Format::BC4UnormBlock,
//        Format::BC4SnormBlock,
//        Format::BC5UnormBlock,
//        Format::BC5SnormBlock,
//        Format::BC6HUfloatBlock,
//        Format::BC6HSfloatBlock,
//        Format::BC7UnormBlock,
//        Format::BC7SrgbBlock,
//        Format::ETC2_R8G8B8UnormBlock,
//        Format::ETC2_R8G8B8SrgbBlock,
//        Format::ETC2_R8G8B8A1UnormBlock,
//        Format::ETC2_R8G8B8A1SrgbBlock,
//        Format::ETC2_R8G8B8A8UnormBlock,
//        Format::ETC2_R8G8B8A8SrgbBlock,
//        Format::EAC_R11UnormBlock,
//        Format::EAC_R11SnormBlock,
//        Format::EAC_R11G11UnormBlock,
//        Format::EAC_R11G11SnormBlock,
//        Format::ASTC_4x4UnormBlock,
//        Format::ASTC_4x4SrgbBlock,
//        Format::ASTC_5x4UnormBlock,
//        Format::ASTC_5x4SrgbBlock,
//        Format::ASTC_5x5UnormBlock,
//        Format::ASTC_5x5SrgbBlock,
//        Format::ASTC_6x5UnormBlock,
//        Format::ASTC_6x5SrgbBlock,
//        Format::ASTC_6x6UnormBlock,
//        Format::ASTC_6x6SrgbBlock,
//        Format::ASTC_8x5UnormBlock,
//        Format::ASTC_8x5SrgbBlock,
//        Format::ASTC_8x6UnormBlock,
//        Format::ASTC_8x6SrgbBlock,
//        Format::ASTC_8x8UnormBlock,
//        Format::ASTC_8x8SrgbBlock,
//        Format::ASTC_10x5UnormBlock,
//        Format::ASTC_10x5SrgbBlock,
//        Format::ASTC_10x6UnormBlock,
//        Format::ASTC_10x6SrgbBlock,
//        Format::ASTC_10x8UnormBlock,
//        Format::ASTC_10x8SrgbBlock,
//        Format::ASTC_10x10UnormBlock,
//        Format::ASTC_10x10SrgbBlock,
//        Format::ASTC_12x10UnormBlock,
//        Format::ASTC_12x10SrgbBlock,
//        Format::ASTC_12x12UnormBlock,
//        Format::ASTC_12x12SrgbBlock,
//        Format::G8B8R8_3PLANE420Unorm,
//        Format::G8B8R8_2PLANE420Unorm,
//    ]
//}
//
//pub fn image_type_list() -> Vec<ImageType> {
//    vec![ImageType::Dim1d, ImageType::Dim2d, ImageType::Dim3d]
//}
//
//pub fn image_tiling_list() -> Vec<ImageTiling> {
//    vec![ImageTiling::Optimal, ImageTiling::Linear]
//}
//
//pub fn image_usage_list() -> Vec<ImageUsage> {
//    let none = ImageUsage::none();
//    vec![
//        ImageUsage::all(),
//        ImageUsage::color_attachment(),
//        ImageUsage::depth_stencil_attachment(),
//        ImageUsage::transient_color_attachment(),
//        ImageUsage::transient_depth_stencil_attachment(),
//        ImageUsage {
//            input_attachment: true,
//            ..none
//        },
//        ImageUsage {
//            sampled: true,
//            ..none
//        },
//        ImageUsage {
//            storage: true,
//            ..none
//        },
//        ImageUsage {
//            transfer_source: true,
//            ..none
//        },
//        ImageUsage {
//            transfer_destination: true,
//            ..none
//        },
//    ]
//}
