typedef struct VkRect2D {       typedef struct VkOffset2D {         typedef struct VkExtent2D {     typedef struct VkExtent3D {
    VkOffset2D    offset;           int32_t    x;                       uint32_t    width;              uint32_t    width;
    VkExtent2D    extent;           int32_t    y;                       uint32_t    height;             uint32_t    height;
}                               }                                   }                                   uint32_t    depth;
                                                                                                    }

VkResult vkAcquireNextImageKHR(     VkResult vkGetSwapchainImagesKHR(               Extending VkBindImageMemoryInfoKHR.pNext
    VkDevice        device,             VkDevice        device,                     typedef struct VkBindImageMemorySwapchainInfoKHR {
    VkSwapchainKHR  swapchain,          VkSwapchainKHR  swapchain,                      VkStructureType    sType;
    uint64_t        timeout,            uint32_t*       pSwapchainImageCount,           const void*        pNext;
    VkSemaphore     semaphore,          VkImage*        pSwapchainImages);              VkSwapchainKHR     swapchain;
    VkFence         fence,                                                              uint32_t           imageIndex;
    uint32_t*       pImageIndex);                                                   }
                                                                                    Extending VkImageCreateInfoKHR.pNext
typedef struct VkPresentInfoKHR {                                                   typedef struct VkImageSwapchainCreateInfoKHR {
    VkStructureType          sType;                                                     VkStructureType    sType;
    const void*              pNext;                                                     const void*        pNext;
    uint32_t                 waitSemaphoreCount;                                        VkSwapchainKHR     swapchain;
    const VkSemaphore*       pWaitSemaphores;                                       }
    uint32_t                 swapchainCount;
    const VkSwapchainKHR*    pSwapchains;
    const uint32_t*          pImageIndices;
    VkResult*                pResults;
}

VkResult vkCreateSharedSwapchainsKHR(
    VkDevice                           device,
    uint32_t                           swapchainCount,
    const VkSwapchainCreateInfoKHR*    pCreateInfos,
    const VkAllocationCallbacks*       pAllocator,
    VkSwapchainKHR*                    pSwapchains);

vkCreateSwapchainKHR,
typedef struct VkSwapchainCreateInfoKHR {                                       typedef struct VkImageCreateInfo {
    VkStructureType                  sType;                                       * VkImageCreateFlags       flags;                 typedef enum VkImageCreateFlagBits {
    const void*                      pNext;                                       * VkImageType              imageType;                 VK_IMAGE_CREATE_SPARSE_BINDING_BIT,
    VkSwapchainCreateFlagsKHR        flags;                                         VkFormat                 format;                    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT,
    VkSurfaceKHR                     surface;                                       VkExtent3D               extent;                    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT,
    uint32_t                         minImageCount;                               * uint32_t                 mipLevels;                 VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT,
                                                                                    uint32_t                 arrayLayers;               VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT,
    VkSurfaceTransformFlagBitsKHR    preTransform;    (VkSurface)                 * VkSampleCountFlagBits    samples;                   VK_IMAGE_CREATE_ALIAS_BIT,
    VkCompositeAlphaFlagBitsKHR      compositeAlpha;  (VkSurface)                 * VkImageTiling            tiling;                    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
    VkColorSpaceKHR                  imageColorSpace; (VkSurface)                   VkImageUsageFlags        usage;                     VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
    VkPresentModeKHR                 presentMode;     (VkSurface)                   VkSharingMode            sharingMode;               VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
                                                                                    uint32_t                 queueFamilyIndexCount;     VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
    VkFormat                         imageFormat;     (VkSurface, VkImage)          const uint32_t*          pQueueFamilyIndices;       VK_IMAGE_CREATE_PROTECTED_BIT,
    VkExtent2D                       imageExtent;     (VkSurface, VkImage)        * VkImageLayout            initialLayout;             VK_IMAGE_CREATE_DISJOINT_BIT,
    uint32_t                         imageArrayLayers;(VkSurface, VkImage)      } VkImageCreateInfo;                                    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
    VkImageUsageFlags                imageUsage;      (VkSurface, VkImage)                                                              VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR,
    VkSharingMode                    imageSharingMode;      (VkImage)           typedef enum VkSharingMode {                            VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR,
    uint32_t                         queueFamilyIndexCount; (VkImage)               VK_SHARING_MODE_EXCLUSIVE = 0,                      VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR,
    const uint32_t*                  pQueueFamilyIndices;   (VkImage)               VK_SHARING_MODE_CONCURRENT = 1,                     VK_IMAGE_CREATE_DISJOINT_BIT_KHR,
                                                                                }                                                       VK_IMAGE_CREATE_ALIAS_BIT_KHR,
    VkBool32                         clipped;                                                                                       }
    VkSwapchainKHR                   oldSwapchain;                              typedef enum VkImageType {
}                                                                                   VK_IMAGE_TYPE_1D,                               typedef enum VkSampleCountFlagBits {
typedef enum VkSwapchainCreateFlagBitsKHR {                                         VK_IMAGE_TYPE_2D,                                   VK_SAMPLE_COUNT_1_BIT,
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,                        VK_IMAGE_TYPE_3D,                                   VK_SAMPLE_COUNT_2_BIT,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR,                                      }                                                       VK_SAMPLE_COUNT_4_BIT,
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR,                                 typedef enum VkImageTiling {                            VK_SAMPLE_COUNT_8_BIT,
}                                                                                   VK_IMAGE_TILING_OPTIMAL,                            VK_SAMPLE_COUNT_16_BIT, 
                                                                                    VK_IMAGE_TILING_LINEAR,                             VK_SAMPLE_COUNT_32_BIT,
typedef struct VkDisplayModeParametersKHR {                                     }                                                       VK_SAMPLE_COUNT_64_BIT,
    VkExtent2D    visibleRegion;                                                                                                    }
    uint32_t      refreshRate;                                                  typedef enum VkImageLayout {
}                                                                                   VK_IMAGE_LAYOUT_UNDEFINED,
                                                                                    VK_IMAGE_LAYOUT_GENERAL,
                                                                                    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_PREINITIALIZED,
                                                                                    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMA,
                                                                                    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
                                                                                    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
                                                                                    VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR,
                                                                                    VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR,
                                                                                    VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR,
                                                                                    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR,
                                                                                    VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR,
                                                                                    VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR,
                                                                                    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR,
                                                                                    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR,
                                                                                    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR,
                                                                                }
