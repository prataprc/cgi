==== VkSurface

* Surface is created using Instance and platform specific surface constructor and parameters.
* Surface can be created directly from display (monitor) bypassing WSI
* Headless surface can be created, which is essentially a no-op.

typedef struct VkRect2D {       typedef struct VkOffset2D {         typedef struct VkExtent2D {
    VkOffset2D    offset;           int32_t    x;                       uint32_t    width;
    VkExtent2D    extent;           int32_t    y;                       uint32_t    height;
}                               }                                   }

vkGetPhysicalDeviceSurfaceSupportKHR (per queue-family)

vkGetPhysicalDeviceSurfacePresentModesKHR               vkGetPhysicalDeviceSurfaceCapabilitiesKHR,
typedef enum VkPresentModeKHR {                         typedef struct VkSurfaceCapabilitiesKHR {                  typedef enum VkSurfaceTransformFlagBitsKHR {
    VK_PRESENT_MODE_IMMEDIATE_KHR,                          uint32_t                    minImageCount;                 VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR,
    VK_PRESENT_MODE_MAILBOX_KHR,                            uint32_t                    maxImageCount;                 VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR,
    VK_PRESENT_MODE_FIFO_KHR,                               VkExtent2D                  currentExtent;                 VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR,                       VkExtent2D                  minImageExtent;                VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR,              VkExtent2D                  maxImageExtent;                VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR,          uint32_t                    maxImageArrayLayers;           VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR,
};                                                          VkSurfaceTransformFlagsKHR  supportedTransforms;           VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR,
                                                            VkSurfaceTransformFlagKHR   currentTransform;              VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR,
vkGetPhysicalDeviceSurfaceFormatsKHR                        VkCompositeAlphaFlagsKHR    supportedCompositeAlpha;       VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR,
typedef struct VkSurfaceFormatKHR {                         VkImageUsageFlags           supportedUsageFlags;       }
    VkFormat           format;                          }
    VkColorSpaceKHR    colorSpace;                      typedef enum VkCompositeAlphaFlagBitsKHR {                 typedef enum VkImageUsageFlagBits {
}                                                           VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR,                         VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
typedef enum VkColorSpaceKHR {                              VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR,                 VK_IMAGE_USAGE_TRANSFER_DST_BIT,
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,                      VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR,                VK_IMAGE_USAGE_SAMPLED_BIT,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT,                VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR,                        VK_IMAGE_USAGE_STORAGE_BIT,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT,            }                                                              VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,         (FB)
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,                                                                              VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, (FB)
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT,                                                                               VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT,
    VK_COLOR_SPACE_BT709_LINEAR_EXT,                                                                                   VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT,         (FB)
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT,                                                                                VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT,                                                                                  VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR,
    VK_COLOR_SPACE_HDR10_ST2084_EXT,                                                                                   VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR,
    VK_COLOR_SPACE_DOLBYVISION_EXT,                                                                                    VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR,
    VK_COLOR_SPACE_HDR10_HLG_EXT,                                                                                      VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT,                                                                                VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT,                                                                             VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV,
    VK_COLOR_SPACE_PASS_THROUGH_EXT,                                                                                   VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT,                                                                    }
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD,
}


==== VkDisplay

vkGetPhysicalDeviceDisplayPropertiesKHR
typedef struct VkDisplayPropertiesKHR {                         vkGetPhysicalDeviceDisplayPlanePropertiesKHR
    VkDisplayKHR                  display;                      typedef struct VkDisplayPlanePropertiesKHR {
    const char*                   displayName;                      VkDisplayKHR    currentDisplay;
    VkExtent2D                    physicalDimensions; (in mm)       uint32_t        currentStackIndex;
    VkExtent2D                    physicalResolution;           };
    VkSurfaceTransformFlagsKHR    supportedTransforms;
    VkBool32                      planeReorderPossible;
    VkBool32                      persistentContent;
};






